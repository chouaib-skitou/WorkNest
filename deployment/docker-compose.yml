version: '3.8'

services:
  postgres-db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 5s
      timeout: 5s
      retries: 5

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 5s
      timeout: 5s
      retries: 5

  identity-service:
    build:
      context: ../services/identity-service
      dockerfile: Dockerfile
    image: worknest/identity-service:latest
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: "postgresql://root:root@postgres-db:5432/identity_service?schema=public"
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      EMAIL_FROM: "no-reply@worknest.com"
      JWT_EXPIRES_IN: "1h"
      JWT_REFRESH_EXPIRES_IN: "7d"
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: "http://frontend:4200"
      BASE_URL: "http://identity-service:5000"
    volumes:
      - ../services/identity-service/config/jwt:/config/jwt:ro
    ports:
      - "5000:5000"
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  project-service:
    build:
      context: ../services/project-service
      dockerfile: Dockerfile
    image: worknest/project-service:latest
    environment:
      NODE_ENV: production
      PORT: 5001
      DATABASE_URL: "postgresql://root:root@postgres-db:5432/project_service?schema=public"
      IDENTITY_SERVICE_URL: "http://identity-service:5000"
      FRONTEND_URL: "http://frontend:4200"
      PROJECT_SERVICE_URL: "http://project-service:5001"
    ports:
      - "5001:5001"
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # New service: MinIO object storage
  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: "rootroot"
      MINIO_ROOT_PASSWORD: "rootroot"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Initialize MinIO with required buckets
  minio-init:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 rootroot rootroot; do
        echo 'Waiting for MinIO to be ready...'
        sleep 3
      done &&
      mc mb myminio/worknest-bucket || true &&
      mc anonymous set public myminio/worknest-bucket &&
      echo 'MinIO initialization completed successfully'"
    networks:
      - app-network
    depends_on:
      minio:
        condition: service_healthy

  # New service: Storage service
  storage-service:
    build:
      context: ../services/storage-service
      dockerfile: Dockerfile
    image: worknest/storage-service:latest
    environment:
      NODE_ENV: production
      PORT: 5002
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "rootroot"
      MINIO_SECRET_KEY: "rootroot"
      MINIO_BUCKET: "worknest-bucket"
      IDENTITY_SERVICE_URL: "http://identity-service:5000"
      FRONTEND_URL: "http://frontend:4200"
    ports:
      - "5002:5002"
    networks:
      - app-network
    depends_on:
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5002/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    image: worknest/frontend:latest
    ports:
      - "4200:80"
    networks:
      - app-network
    depends_on:
      - identity-service
      - project-service
      - storage-service

volumes:
  postgres_data:
  minio_data:

networks:
  app-network: